#+TITLE EMACS GNU Linux Config
#+AUTHOR JWM
#+EMAIL dubs.m@mac.com
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el


* Packages
- Need to M-x package-install use-package-ensure, org-bullets, for cold installs

#+begin_src emacs-lisp
  ;; begin file s

  (set-language-environment "UTF-8")
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
  (require 'package)
  (add-to-list 'package-archives '("non-GNU" . "http://elpa.nongnu.org/nongnu/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))
  (setq package-enable-at-startup nil)
  (package-initialize)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (use-package diminish)
  (use-package auto-compile
    :diminish
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (add-to-list 'load-path "~/.emacs.d/data/")
  (load-file "~/.emacs.d/.ercrc.el")
  (use-package all-the-icons)
  (use-package no-littering)
  (add-to-list 'exec-path "/usr/bin/")
  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (add-to-list 'mode-line-misc-info '("@" system-name) t)
(setq auth-sources '("~/.authinfo.gpg"
                     "~/.authinfo"
                     "~/.netrc"))
#+end_src
* Basic setup
** Font setup
- This is a gnu linux setup with fonts
#+begin_src emacs-lisp
  ;; May need to adjust this font size for the system
  (defvar jwm/default-font-size 125)

  (set-face-attribute 'default nil :font "Inconsolata" :height jwm/default-font-size)
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Inconsolata" :height jwm/default-font-size)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Inconsolata" :height jwm/default-font-size :weight 'regular)

  (global-hl-line-mode t)
#+end_src
** Basic UI config
#+begin_src emacs-lisp
      (display-time)
      (setq display-time-24hr-format t)
      ;; Make ESC quit prompts
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
      (setq user-full-name "John Mosty"
            user-mail-address "dubs.mosty@gmail.com"
            calendar-latitude 30.32
            calendar-longitude -97.71
            calendar-location-name "Austin, TX")
      (use-package rainbow-mode
        :diminish)
      (column-number-mode)
      (global-display-line-numbers-mode 1)
      (setq display-line-numbers-type 'visual)
      ;; Disable line numbers for some modes
      (dolist (mode '(term-mode-hook
                      shell-mode-hook
                      eshell-mode-hook
                      erc-mode-hook
                      org-mode-hook))
        (add-hook mode (lambda () (display-line-numbers-mode 0))))


      (custom-set-variables '(epg-gpg-program "/usr/bin/gpg"))
      (winner-mode)
      (load "server")
      (unless (server-running-p) (server-start))
      (global-set-key (kbd "<f5>") 'org-capture)
      (global-set-key (kbd "C-c j") 'org-journal-new-entry)

      (set-window-scroll-bars (minibuffer-window) nil nil)
      (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

      (setq scroll-conservatively 100)
      (setq kill-whole-line t)
      (setq kill-read-only-ok t)
      (setq require-final-newline t)
      (setq echo-keystrokes 0.1)
      (setq focus-follows-mouse t)

      (setq split-height-threshold nil)
      (setq split-width-threshold 0)
      (setq org-confirm-elisp-link-function nil)

      (setq save-interprogram-paste-before-kill t)

      (setq initial-frame-alist
            '((top . 1) (left . 1) (width . 115) (height . 45)))

      (defun my-pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

      (dolist (command '(recenter-top-bottom other-window ace-window my-scroll-down-half my-scroll-up-half))
        (advice-add command :after #'my-pulse-line))

      (use-package eldoc
        :diminish)

      (defun jwm/kill-current-buffer ()
        "Kill the current buffer without prompting."
        (interactive)
        (kill-buffer (current-buffer)))

      (global-set-key (kbd "C-x k") 'jwm/kill-current-buffer)

      (use-package expand-region
        :diminish
        :bind ("C-M-=" . er/expand-region))

       (use-package smartparens
        :diminish)

#+end_src
** change functions
#+begin_src emacs-lisp
; Re-create ci" ca"...
(defun seek-backward-to-char (chr)
  "Seek backwards to a character"
  (interactive "cSeek back to char: ")
  (while (not (= (char-after) chr))
    (forward-char -1)))

(setq char-pairs
      '(( ?\" . ?\" )
        ( ?\' . ?\' )
        ( ?\( . ?\) )
        ( ?\[ . ?\] )
        ( ?\{ . ?\} )
        ( ?<  . ?>  )))

(defun get-char-pair (chr)
  (let ((result ()))
    (dolist (x char-pairs)
      (setq start (car x))
      (setq end (cdr x))
      (when (or (= chr start) (= chr end))
        (setq result x)))
      result))

(defun get-start-char (chr)
  (car (get-char-pair chr)))
(defun get-end-char (chr)
  (cdr (get-char-pair chr)))

(defun seek-to-matching-char (start end count)
  (while (> count 0)
    (if (= (following-char) end)
        (setq count (- count 1))
      (if (= (following-char) start)
          (setq count (+ count 1))))
    (forward-char 1)))

(defun seek-backward-to-matching-char (start end count)
  (if (= (following-char) end)
      (forward-char -1))
  (while (> count 0)
    (if (= (following-char) start)
        (setq count (- count 1))
      (if (= (following-char) end)
          (setq count (+ count 1))))
    (if (> count 0)
        (forward-char -1))))

(defun delete-between-pair (char)
  "Delete in between the given pair"
  (interactive "cDelete between char: ")
  (seek-backward-to-matching-char (get-start-char char) (get-end-char char) 1)
  (forward-char 1)
  (setq mark (point))
  (seek-to-matching-char (get-start-char char) (get-end-char char) 1)
  (forward-char -1)
  (kill-region mark (point)))

(defun delete-all-pair (char)
  "Delete in between the given pair and the characters"
  (interactive "cDelete all char: ")
  (seek-backward-to-matching-char (get-start-char char) (get-end-char char) 1)
  (setq mark (point))
  (forward-char 1)
  (seek-to-matching-char (get-start-char char) (get-end-char char) 1)
  (kill-region mark (point)))

(global-set-key (kbd "C-c i") 'delete-between-pair)
(global-set-key (kbd "C-c A") 'delete-all-pair)
#+end_src
** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

** Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :ensure t
    :diminish
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 3)
    (setq dashboard-banner-logo-title "Welcome to the Mac")
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-navigator t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (agenda . 10)
                            (registers . 5)))
    (setq dashboard-set-file-icons t))

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

  (diminish 'page-break-lines-mode)
#+end_src
* Theme config
#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))

  (use-package modus-themes
    :ensure                         ; omit this to use the built-in themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          modus-themes-bold-constructs t
          modus-themes-hl-line 'underline-only-neutral
          modus-themes-subtle-line-numbers t
          modus-themes-links 'faint-neutral-underline
          modus-themes-syntax 'faint
          modus-themes-mode-line 'accented-moody
          modus-themes-completions 'opinionated
          modus-themes-org-habit 'simplified
          modus-themes-prompts 'subtle-accented)
    (setq-default cursor-type 'bar)
    (setq modus-themes-headings
          '((1 . rainbow-highlight)
            (2 . rainbow-highlight)
            (3 . rainbow-highlight)
            (t . rainbow-highlight)))
    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    ;;(modus-themes-load-operandi);; OR
    (modus-themes-load-vivendi)
    :bind ("<f12>" . modus-themes-toggle))
  (use-package doom-themes
    :config
    (doom-themes-visual-bell-config))
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))
  (defun jwm/apply-theme-drk ()
    "Apply my chosen theme and make frames just slightly transparent."
    (interactive)
    (modus-themes-load-vivendi)
    (transparency 95))
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (jwm/apply-theme-drk))))
    (jwm/apply-theme-drk))
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom
    (dired-listing-switches "-Agho")
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    (delete-by-moving-to-trash t))


  (use-package dired-single)

;;  (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)

  #+end_src
* Ivy hydra Prescient
#+begin_src emacs-lisp

      (use-package ivy-hydra
        :defer t
        :diminish
        :after hydra)

      (use-package ivy
        :diminish
        :config
        (ivy-mode 1))

      (use-package counsel
        :diminish
        :bind
        (("M-y" . counsel-yank-pop)
         :map ivy-minibuffer-map
         ("M-y" . ivy-next-line)))

      (use-package swiper)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper-isearch)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f2> f") 'counsel-describe-function)
      (global-set-key (kbd "<f2> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f2> o") 'counsel-describe-symbol)
      (global-set-key (kbd "<f2> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

      (use-package ivy-rich
        :init
        (ivy-rich-mode 1))

      (use-package avy
        :ensure t
        :diminish
        :bind
        ("M-s" . avy-goto-word-1)
        ("M-g M-g" . avy-goto-line))

      (use-package which-key
        :init (which-key-mode)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay 0.3))

      (use-package prescient)
      (use-package ivy-prescient
        :config
        (ivy-prescient-mode 1))
      (use-package company-prescient
        :config
        (company-prescient-mode 1))

#+end_src
* Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
* Magit
#+begin_src emacs-lisp
     (use-package magit
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(global-set-key (kbd "C-c g") 'magit-status)
  ;; (add-to-map "<SPC> m" 'magit-status)
#+end_src
* Org Mode
** Main Org-mode
#+begin_src emacs-lisp

  (defun jwm/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (diminish 'visual-line-mode)
    (diminish 'org-indent-mode)
    (set-face-attribute 'org-headline-done nil :strike-through t)
    (setq org-hide-emphasis-markers t
          org-fontify-done-headline t
          org-hide-leading-stars t
          org-pretty-entities t)
    (setq org-list-demote-modify-bullet
          (quote (("+" . "-")
                  ("-" . "+")
                  ("*" . "-")
                  ("1." . "-")
                  ("1)" . "-")
                  ("A)" . "-")
                  ("B)" . "-")
                  ("a)" . "-")
                  ("b)" . "-")
                  ("A." . "-")
                  ("B." . "-")
                  ("a." . "-")
                  ("b." . "-")))))

  (defun jwm/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook (org-mode . jwm/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
;;    (jwm/org-font-setup)
    (setq org-adapt-indentation nil))
  (add-hook 'before-save-hook 'time-stamp)
  (use-package org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))

  (defun jwm/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :diminish
    :hook (org-mode . jwm/org-mode-visual-fill))

  (setq org-default-notes-file (concat org-directory "~/org/notes.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (defun air-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))

  (defun air-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

           PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-ndays 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                     (air-org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))))

  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key "\C-cl" 'org-store-link)
  (define-key global-map "\C-cL" 'org-occur-link-in-agenda-files)
  (global-set-key (kbd "<home>") 'beginning-of-buffer)
  (global-set-key (kbd "M-o") 'other-window)

  (setq org-capture-templates
        '(("j" "Journal entry" plain (function org-journal-find-location)
           "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
           :jump-to-captured t :immediate-finish t)
          ("t" "Tasks" entry (file+headline "" "Tasks")
           "*** TODO %?\n%U\n %a %i" :prepend t)
          ("T" "Tasks with ClipBoard" entry (file+headline "" "Tasks")
           "*** TODO %?\n%U\n   %^C" :prepend t)))

  (use-package org-autolist
    :diminish)
  (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))

  ;;(setq org-agenda-files '("~/Library/Mobile ;;Documents/iCloud~com~appsonthemove~beorg/Documents/org"))

  (set-face-attribute 'org-headline-done nil :strike-through t)

#+end_src
** Babel and Structure templates
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (js . t)
     (ledger . t)
     (kotlin . t)))

  (setq org-confirm-babel-evaluate nil)
;;  (use-package org-tempo)

  (use-package ob-kotlin)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("ko" . "src kotlin"))
  (add-to-list 'org-structure-template-alist '("le" . "src ledger"))

#+end_src
** Encryption
#+begin_src emacs-lisp

  (require 'epa-file)
  (epa-file-enable)

  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.
  ;;(setq org-crypt-key '("0F5CDB0D40E4D8AF93DE2C70D5E19C8A72EAD74F"))
  ;;(setq org-crypt-key '("0774531735284E3FBFAB276884494577248B47A6"))
  (setq org-crypt-key '("C2CCDC9497A772D8F72FE253AA98E9E6B5C5104F"))
  ;;(setq org-crypt-key nil)
  (setq auto-save-default nil)
  (global-set-key (kbd "C-c e") 'org-decrypt-entry)
  ;;  (add-to-map "<SPC> u" 'org-decrypt-entry)
#+end_src
* LaTeX
#+begin_src emacs-lisp
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               `("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))

  (require 'ox-html)
;;  (require 'ox-extra)
;;  (ox-extras-activate '(ignore-headlines))
#+end_src

* Spell
#+begin_src emacs-lisp
  (use-package synonyms
      :ensure nil
      :init ;; executed before loading package
      (setq synonyms-file        "~/.emacs.d/data/mthesaur.txt")
      (setq synonyms-cache-file  "~/.emacs.d/data/mycachefile")
      :config
      (defun my-synonym-current-word ()
        "Lookup synonyms for current word."
        (interactive)
        (synonyms-lookup (thing-at-point 'word) nil nil))
      :bind
      ("<f9>" . my-synonym-current-word))
  (use-package company
    :diminish
    :config
    (setq company-idle-delay 2)
    (setq company-minimum-prefix-length 1)
    (add-hook 'after-init-hook 'global-company-mode))

  (global-set-key (kbd "M-/") 'company-complete-common-or-cycle)

  (setq ispell-program-name "/usr/bin/hunspell")

  (require 'ispell)

  (global-set-key (kbd "<f8>") 'ispell-word)
  (global-set-key (kbd "C-<f8>") 'flyspell-mode)

  (use-package flyspell
    :demand t
    :diminish
    :config
    (use-package flyspell-correct-ivy
      :diminish)
    (defun flyspellCompletion()
      (flyspell-mode 1)
      (set (make-local-variable 'company-backends)
           (copy-tree company-backends))
      (add-to-list 'company-backends 'company-ispell))
    (defun flyspell-most-modes()
      (add-hook 'text-mode-hook 'flyspellCompletion)
      (add-hook 'prog-mode-hook 'flyspellCompletion)
      (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
        (add-hook hook (lambda ()
                         (flyspell-mode -1)))))
    (flyspell-most-modes)
    :bind (:map flyspell-mode-map
                ("C-." . flyspell-correct-wrapper)))
 ;; easy spell check
  (global-set-key (kbd "<f8>") 'ispell-word)
  (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
  (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
  (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word))
  (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
#+end_src
* Python
#+begin_src emacs-lisp
(setq python-shell-interpreter "/usr/bin/python3")
(setq org-babel-python-command "/usr/bin/python3")
#+end_src
* Macros
#+begin_src emacs-lisp
;;  (evil-set-register ?d [?i ?* ?  ?\C-c ?. return escape])
;;  (evil-set-register ?t [?i ?\C-u ?\C-c ?. return escape])
;;  (evil-set-register ?b [?$ ?0 ?i ?+ escape ?A ?+ S-right escape])

;;  (add-to-map "Y" 'append-to-register)
;;  (add-to-map "P" 'insert-register)

  (setq register-separator ?+)
  (set-register register-separator "\n\n")
#+end_src
* eshell
#+begin_src emacs-lisp
   (require 'em-pred)
  (add-to-list 'eshell-predicate-alist '(?T . (eshell-org-file-tags)))
  (defun eshell-org-file-tags ()
    "Helps the eshell parse the text the point is currently on,
          looking for parameters surrounded in single quotes. Returns a
          function that takes a FILE and returns nil if the file given to
          it doesn't contain the org-mode #+FILETAGS: entry specified."
    ;; Step 1. Parse the eshell buffer for our tag between quotes
    ;;         Make sure to move point to the end of the match:
    (if (looking-at "'\\([^)']+\\)'")
        (let* ((tag (match-string 1))
               (reg (concat "^#\\+FILETAGS:.*\\b" tag "\\b")))
          (goto-char (match-end 0))
          ;; Step 2. Return the predicate function:
          ;;         Careful when accessing the `reg' variable.
          `(lambda (file)
             (with-temp-buffer
               (insert-file-contents file)
               (re-search-forward ,reg nil t 1))))
      (error "The `T' predicate takes an org-mode tag value in single quotes.")))
  (defun jwm/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)
    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))
  (use-package eshell-git-prompt)
  (use-package eshell
    :hook (eshell-first-time-mode . jwm/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'robbyrussell))
  (use-package symon)
  (add-hook 'after-init-hook 'symon-mode)
  (defun buffcop (buffer)
    (with-current-buffer buffer
      (buffer-string)))
  (defun eshell/emacs (file)
    (find-file file))
  (defun eshell/ffo (file)
    (find-file-other-frame file))
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
                  current buffer's file. The eshell is renamed to match that
                  directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
      (split-window-vertically (- height))
      (other-window 1)
      (eshell "new")
      (rename-buffer (concat "*eshell: " name "*"))
      (insert (concat "la"))
      (eshell-send-input)))
  (defun eshell/x ()
    (insert "exit")
    (eshell-send-input)
    (delete-window))

  (global-set-key (kbd "<f1>") 'eshell-here)
  (global-set-key (kbd "C-c <f1>") 'eshell)
#+end_src
* Popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :diminish
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type)
           ("M-_"   . popper-lower-to-popup)
           ("M-^"   . popper-raise-popup))

    :init
    (setq popper-reference-buffers
          '("^\\*Messages\\*"
            "^Output\\*"
            "^\\Calc:"
            "*Synonyms*"
            "^\\Warnings\\*"
            "^\\*helpful\\*"
            help-mode
            compilation-mode
            messages-mode
            occur-mode))
    (setq popper-display-function #'popper-select-popup-at-bottom)
    (popper-mode +1))
#+end_src
* JDEE
#+begin_src emacs-lisp
(setq jdee-server-dir "~/myJars")
#+end_src
* Ledger
#+begin_src emacs-lisp

    (use-package ledger-mode
        :ensure t
        :init
        (setq ledger-clear-whole-transactions 1)
        :config
        :mode "\\.dat//'")

      (add-hook 'ledger-mode-hook
              (lambda ()
                  (setq-local tab-always-indent 'complete)
                  (setq-local completion-cycle-threshold t)
                  (setq-local ledger-complete-in-steps t)))

    (setq ledger-binary-path "/usr/bin/ledger")
#+end_src
* Custom variable
#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-agenda-include-diary t)
   '(org-agenda-skip-deadline-if-done t)
   '(org-agenda-skip-scheduled-if-done t)
   '(org-agenda-skip-timestamp-if-done t)
   '(org-agenda-start-on-weekday nil)
   '(org-agenda-sticky t)
   '(org-agenda-tags-todo-honor-ignore-options nil)
   '(org-clock-into-drawer "LOGBOOK")
   '(org-closed-keep-when-no-todo nil)
   '(org-enforce-todo-checkbox-dependencies t)
   '(org-enforce-todo-dependencies t)
   '(org-hide-emphasis-markers t)
   '(org-log-done 'time)
   '(org-log-done-with-time t)
   '(org-log-into-drawer t)
   '(org-return-follows-link t)
   '(org-special-ctrl-a/e t)
   '(org-special-ctrl-k t)
   '(org-todo-keywords '((type "TODO(t)" "DONE(d!)")))
   '(org-todo-state-tags-triggers nil)
   '(org-use-fast-todo-selection 'auto)
   '(package-selected-packages
     '(modus-themes modus-operandi-theme doom-themes-visual-bell-config doom-themes doom-modeline calfw-org calfw nvm phi-search-dired helpful which-key-posframe all-the-icons-ivy-rich ivy-rich which-key avy diminish ivy dashboard org-bullets use-package helm evil-visual-mark-mode))
   '(safe-local-variable-values
       '((eval add-hook 'after-save-hook 'org-html-export-to-html t t)
       (eval add-hook 'after-save-hook #'org-babel-tangle t t)
       (org-confirm-babel-evaluate)))
   '(tab-bar-mode t)
   '(tool-bar-mode nil)
   '(vc-annotate-background nil)
   '(vc-annotate-background-mode nil))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+end_src
