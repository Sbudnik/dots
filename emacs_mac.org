#+TITLE EMACS Mac Config
#+SETUPFILE: ~/org/org-html-themes/org-themes/src/simple_inline/simple_inline.theme
#+AUTHOR JWM
#+EMAIL dubs.m@mac.com
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs

* Packages
- Need to M-x package-install use-package-ensure, org-bullets, for cold installs

#+begin_src emacs-lisp
  ;; begin file s

  (require 'package)
  (require 'org)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)

  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)

  (use-package all-the-icons)
  (use-package no-littering)
  (add-to-list 'exec-path "/usr/local/bin/")
#+end_src
* Basic setup
** Font setup
- This is a mac setup with fonts
#+begin_src emacs-lisp
  ;; May need to adjust this font size for the system
  (defvar jwm/default-font-size 125)

  (set-face-attribute 'default nil :font "Fira Code" :height jwm/default-font-size)
  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height jwm/default-font-size)
  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Fira Code" :height jwm/default-font-size :weight 'regular)

  (global-hl-line-mode t)
#+end_src
** Basic UI config
#+begin_src emacs-lisp
      ;; Make ESC quit prompts
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
      (use-package diminish)

      (setq user-full-name "John Mosty"
            user-mail-address "dubs.mosty@gmail.com"
            calendar-latitude 30.32
            calendar-longitude -97.71
            calendar-location-name "Austin, TX")

      (column-number-mode)
      (global-display-line-numbers-mode 1)
      (setq display-line-numbers-type 'visual)
      ;; Disable line numbers for some modes
      (dolist (mode '(term-mode-hook
                      shell-mode-hook
                      eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))


   (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
    (winner-mode)
    (server-start)
      (global-set-key (kbd "<f5>") 'org-capture)
      (global-set-key (kbd "<f4>") 'cfw:open-org-calendar)
      (global-set-key (kbd "C-c j") 'org-journal-new-entry)

      (set-window-scroll-bars (minibuffer-window) nil nil)
      (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

      (setq scroll-conservatively 100)
      (setq kill-whole-line t)
      (setq kill-read-only-ok t)
      (setq require-final-newline t)
      (setq echo-keystrokes 0.1)
      (setq focus-follows-mouse t)

      (setq split-height-threshold nil)
      (setq split-width-threshold 0)
      (setq org-confirm-elisp-link-function nil)

      (setq save-interprogram-paste-before-kill t)

      (setq initial-frame-alist
             '((top . 1) (left . 1) (width . 85) (height . 45)))

  (defun my-pulse-line (&rest _)
        "Pulse the current line."
        (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(recenter-top-bottom other-window ace-window my-scroll-down-half my-scroll-up-half))
    (advice-add command :after #'my-pulse-line))

#+end_src
** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

** Dashboard
#+begin_src emacs-lisp

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
(setq dashboard-banner-logo-title "Welcome to the Mac")
(setq dashboard-center-content t)
(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)

#+end_src
* Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil
          evil-want-keybinding nil)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list
          '(ag dired magit mu4e which-key))
    (evil-collection-init))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

    (defun add-to-map(keys func)
      "Add a keybinding in evil mode from keys to func."
      (define-key evil-normal-state-map (kbd keys) func)
      (define-key evil-motion-state-map (kbd keys) func))

    (add-to-map "<SPC>" nil)

    (add-to-map "<SPC> f" 'find-file)
    (add-to-map "<SPC> s" 'save-buffer)
    (add-to-map "<SPC> b" 'switch-to-buffer)


    (defun jwm/kill-current-buffer ()
      "Kill the current buffer without prompting."
      (interactive)
      (kill-buffer (current-buffer)))

    (global-set-key (kbd "C-x k") 'jwm/kill-current-buffer)
    (add-to-map "<SPC> k" 'jwm/kill-current-buffer)
#+end_src
* Theme config
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 18)))

  (use-package modus-themes
    :ensure                         ; omit this to use the built-in themes
    :init
    ;; Add all your customizations prior to loading the themes
      (setq modus-themes-slanted-constructs t
            modus-themes-bold-constructs t
            modus-themes-intense-hl-line t
            modus-themes-subtle-line-numbers t
            modus-themes-links 'faint-neutral-underline
            modus-themes-syntax 'faint
            modus-themes-completions 'opinionated
            modus-themes-org-habit 'simplified
            modus-themes-lang-checkers 'subtle-foreground-straight-underline
            modus-themes-prompts 'subtle-accented)


    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    :config
    ;; Load the theme of your choice:
    (modus-themes-load-operandi);; OR (modus-themes-load-vivendi)
    :bind ("<f12>" . modus-themes-toggle))

   (use-package doom-themes
     :config
  ;;   ;; Global settings (defaults)
  ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;;   ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config))

  ;; (defun transparency (value)
  ;;   "Sets the transparency of the frame window. 0=transparent/100=opaque."
  ;;   (interactive "nTransparency Value 0 - 100 opaque:")
  ;;   (set-frame-parameter (selected-frame) 'alpha value))

  ;; (defun hrs/apply-theme-drk ()
  ;;   "Apply my chosen theme and make frames just slightly transparent."
  ;;   (interactive)
  ;;   (load-theme 'doom-one t)
  ;;   (transparency 100))

  ;; (if (daemonp)
  ;;     (add-hook 'after-make-frame-functions
  ;;               (lambda (frame)
  ;;               (setq doom-modeline-icon t)
  ;;                 (with-selected-frame frame (hrs/apply-theme-drk))))
  ;;   (hrs/apply-theme-drk))

  ;; (setq jwm/themes '(doom-one doom-one-light doom-dark+ doom-challenger-deep doom-acario-light doom-tomorrow-day doom-peacock doom-zenburn doom-gruvbox))
  ;; (setq jwm/themes-index 0)

  ;; (defun jwm/cycle-theme ()
  ;;   (interactive)
  ;;   (setq jwm/themes-index (% (1+ jwm/themes-index) (length jwm/themes)))
  ;;   (jwm/load-indexed-theme))

  ;; (defun jwm/load-indexed-theme ()
  ;;   (jwm/try-load-theme (nth jwm/themes-index jwm/themes)))

  ;; (defun jwm/try-load-theme (theme)
  ;;   (if (ignore-errors (load-theme theme :no-confirm))
  ;;       (mapcar #'disable-theme (remove theme custom-enabled-themes))
  ;;     (message "Unable to find theme file for '%s'" theme)))
  ;; (global-set-key (kbd "<f12>") 'jwm/cycle-theme)

#+end_src
* Dired
#+begin_src emacs-lisp
       (use-package dired
         :ensure nil
         :commands (dired dired-jump)
         :bind (("C-x C-j" . dired-jump))
         :custom ((dired-listing-switches "-lAht"))
         :config
         (evil-collection-define-key 'normal 'dired-mode-map
           "h" 'dired-single-up-directory
           "l" 'dired-single-buffer))

    ;; ;;   (add-hook 'dired-mode-hook
    ;; ;;         (lambda ()
    ;; ;;           (dired-hide-details-mode)))

      (use-package dired-single)

    (add-to-map "<SPC> d" 'dired)

    (add-to-map "<SPC> j" 'dired-jump)
    ;; ;; (use-package all-the-icons-dired)
       (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)

    ;;   ;;(use-package dired-open
      ;;  :config
        ;; Doesn't work as expected!
        ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
      ;;  (setq dired-open-extensions '(("png" . "feh")
      ;;                                ("mkv" . "mpv"))))

      ;; (use-package dired-hide-dotfiles
      ;;   :hook (dired-mode . dired-hide-dotfiles-mode)
      ;;   :config
      ;;   (evil-collection-define-key 'normal 'dired-mode-map
      ;;     "H" 'dired-hide-dotfiles-mode))
#+end_src
* Ivy hydra Prescient
#+begin_src emacs-lisp

  (use-package ivy-hydra
    :defer t
    :after hydra)

  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package swiper)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  ;; enable this if you want `swiper' to use it
  ;; (setq search-default-mode #'char-fold-to-regexp)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

  (use-package ivy-rich
   :init
   (ivy-rich-mode 1))

  (use-package avy
    :diminish
    :bind*
    ("C-;" . evil-avy-goto-char-2))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

  (use-package prescient)
  (use-package ivy-prescient
      :config
      (ivy-prescient-mode 1))
  (use-package company-prescient
      :config
      (company-prescient-mode 1))

#+end_src
* Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
* Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "c:/users/jwmosty/AppData/Roaming/GAS_Asc")
    (setq projectile-project-search-path '("c:/users/jwmosty/AppData/Roaming/GAS_Asc")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
* Magit
#+begin_src emacs-lisp
    (use-package magit
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (add-to-map "<SPC> m" 'magit-status)
#+end_src
* Org Mode
** Main Org-mode
#+begin_src emacs-lisp

    (defun jwm/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (defun jwm/org-font-setup ()
      ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

    (use-package org
      :hook (org-mode . jwm/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")
      (jwm/org-font-setup))

    (require 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (defun jwm/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . jwm/org-mode-visual-fill))

    (setq org-default-notes-file (concat org-directory "/notes.org"))

     (require 'org-habit)
      (add-to-list 'org-modules 'org-habit)
      (setq org-habit-graph-column 60)

    (defun air-org-skip-subtree-if-habit ()
      "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (if (string= (org-entry-get nil "STYLE") "habit")
            subtree-end
          nil)))

    (defun air-org-skip-subtree-if-priority (priority)
      "Skip an agenda subtree if it has a priority of PRIORITY.

    PRIORITY may be one of the characters ?A, ?B, or ?C."
      (let ((subtree-end (save-excursion (org-end-of-subtree t)))
            (pri-value (* 1000 (- org-lowest-priority priority)))
            (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
            subtree-end
          nil)))

    (setq org-agenda-custom-commands
          '(("d" "Daily agenda and all TODOs"
             ((tags "PRIORITY=\"A\""
                    ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                     (org-agenda-overriding-header "High-priority unfinished tasks:")))
              (agenda "" ((org-agenda-ndays 1)))
              (alltodo ""
                       ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                       (air-org-skip-subtree-if-priority ?A)
                                                       (org-agenda-skip-if nil '(scheduled deadline))))
                        (org-agenda-overriding-header "ALL normal priority tasks:"))))
             ((org-agenda-compact-blocks t)))))

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key "\C-cl" 'org-store-link)
    (define-key global-map "\C-cL" 'org-occur-link-in-agenda-files)
    (global-set-key (kbd "<home>") 'beginning-of-buffer)
    (global-set-key (kbd "M-o") 'other-window)

    (setq org-capture-templates
          '(("j" "Journal entry" plain (function org-journal-find-location)
             "** %(format-time-string org-journal-time-format)%^{Title}\n%i%?"
             :jump-to-captured t :immediate-finish t)
            ("t" "Tasks" entry (file+headline "" "Tasks")
             "*** TODO %?\n%U\n %a %i" :prepend t)
            ("T" "Tasks with ClipBoard" entry (file+headline "" "Tasks")
             "*** TODO %?\n%U\n   %^C" :prepend t)))

    (use-package org-autolist)
    (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))

  (setq org-agenda-files '("~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org"))

  (set-face-attribute 'org-headline-done nil :strike-through t)

#+end_src
** Babel and Structure templates
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (js . t)
     (ledger . t)
     (kotlin . t)))

  (setq org-confirm-babel-evaluate nil)
  (require 'org-tempo)

  (require 'ob-kotlin)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("ko" . "src kotlin"))
  (add-to-list 'org-structure-template-alist '("le" . "src ledger"))

#+end_src
** Encryption
#+begin_src emacs-lisp

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance '("crypt"))

    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    ;;(setq org-crypt-key '("0F5CDB0D40E4D8AF93DE2C70D5E19C8A72EAD74F"))
    (setq org-crypt-key nil)
    (setq auto-save-default nil)

    (add-to-map "<SPC> u" 'org-decrypt-entry)
#+end_src
* LaTeX
#+begin_src emacs-lisp
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               `("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")))

  (require 'ox-html)
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src
* Spell
#+begin_src emacs-lisp
(use-package company)
(global-company-mode)
(global-set-key (kbd "M-/") 'company-complete-common)

(setq ispell-program-name "/usr/local/bin/hunspell")

(require 'ispell)

(global-set-key (kbd "<f8>") 'ispell-word)
(global-set-key (kbd "C-<f8>") 'flyspell-mode)

(use-package flyspell :demand t
  :config
  (use-package flyspell-correct-ivy)
  (defun flyspellCompletion()
    (flyspell-mode 1)
    (set (make-local-variable 'company-backends)
         (copy-tree company-backends))
    (add-to-list 'company-backends 'company-ispell))
  (defun flyspell-most-modes()
    (add-hook 'text-mode-hook 'flyspellCompletion)
    (add-hook 'prog-mode-hook 'flyspellCompletion)
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
      (add-hook hook (lambda ()
                       (flyspell-mode -1)))))
  (flyspell-most-modes)
  :bind (:map flyspell-mode-map
              ("C-." . flyspell-correct-wrapper)))

(use-package undo-tree)
(global-undo-tree-mode)
#+end_src
* Language
#+begin_src emacs-lisp

  (use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
          (python-mode . lsp)
          ;; if you want which-key integration
          (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

  (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :custom
      (lsp-ui-doc-position 'bottom))
  (use-package lsp-ivy)
  (use-package lsp-treemacs
      :after lsp)

#+end_src
* Python
#+begin_src emacs-lisp
(setq python-shell-interpreter "/usr/local/bin/python3")
(setq org-babel-python-command "/usr/local/bin/python3")
#+end_src
* Macros
#+begin_src emacs-lisp
(evil-set-register ?d [?i ?* ?  ?\C-c ?. return escape])
(evil-set-register ?t [?i ?\C-u ?\C-c ?. return escape])
(evil-set-register ?b [?$ ?0 ?i ?+ escape ?A ?+ S-right escape])
#+end_src
* eshell
#+begin_src emacs-lisp
(defun jwm/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell-git-prompt)

(use-package eshell
  :hook (eshell-first-time-mode . jwm/configure-eshell)
  :config

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

  (eshell-git-prompt-use-theme 'git-radar))

(use-package symon)
(add-hook 'after-init-hook 'symon-mode)

(defun buffcop (buffer)
  (with-current-buffer buffer
    (buffer-string)))

  (defun eshell/emacs (file)
      (find-file file))

  (defun eshell/ffo (file)
      (find-file-other-frame file))
#+end_src
* Popper
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type)
           ("M-_"   . popper-lower-to-popup)
           ("M-^"   . popper-raise-popup))

    :init
    (setq popper-reference-buffers
          '("^\\*Messages\\*"
            "^Output\\*"
            "^\\Calc:"
            "^\\Warnings\\*"
            "^\\*helpful\\*"
            help-mode
            compilation-mode
            messages-mode
            occur-mode))
    (setq popper-display-function #'popper-select-popup-at-bottom)
    (popper-mode +1))
#+end_src
* JDEE
#+begin_src emacs-lisp
(setq jdee-server-dir "~/myJars")
#+end_src
* Ledger
#+begin_src emacs-lisp

    (use-package ledger-mode
        :ensure t
        :init
        (setq ledger-clear-whole-transactions 1)
        :config
        (add-to-list 'evil-emacs-state-modes 'ledger-report-mode)
        :mode "\\.dat//'")

      (add-hook 'ledger-mode-hook
              (lambda ()
                  (setq-local tab-always-indent 'complete)
                  (setq-local completion-cycle-threshold t)
                  (setq-local ledger-complete-in-steps t)))

    (setq ledger-binary-path "/usr/local/bin/ledger")
#+end_src
* Custom variable
#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(org-agenda-include-diary t)
   '(org-agenda-skip-deadline-if-done t)
   '(org-agenda-skip-scheduled-if-done t)
   '(org-agenda-skip-timestamp-if-done t)
   '(org-agenda-start-on-weekday nil)
   '(org-agenda-sticky t)
   '(org-agenda-tags-todo-honor-ignore-options nil)
   '(org-clock-into-drawer "LOGBOOK")
   '(org-closed-keep-when-no-todo nil)
   '(org-enforce-todo-checkbox-dependencies t)
   '(org-enforce-todo-dependencies t)
   '(org-hide-emphasis-markers t)
   '(org-log-done 'time)
   '(org-log-done-with-time t)
   '(org-log-into-drawer t)
   '(org-return-follows-link t)
   '(org-special-ctrl-a/e t)
   '(org-special-ctrl-k t)
   '(org-todo-keywords '((type "TODO(t)" "DONE(d!)")))
   '(org-todo-state-tags-triggers nil)
   '(org-use-fast-todo-selection 'auto)
   '(package-selected-packages
     '(modus-themes modus-operandi-theme doom-themes-visual-bell-config doom-themes doom-modeline calfw-org calfw nvm phi-search-dired helpful which-key-posframe all-the-icons-ivy-rich ivy-rich which-key avy diminish ivy dashboard org-bullets use-package helm evil-visual-mark-mode))
   '(safe-local-variable-values
     '((eval add-hook 'after-save-hook #'org-babel-tangle t t)
       (org-confirm-babel-evaluate)))
   '(tab-bar-mode t)
   '(tool-bar-mode nil)
   '(vc-annotate-background nil)
   '(vc-annotate-background-mode nil))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src
